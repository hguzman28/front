pipeline {
	//                                             #### DESCRIPCIÓN GENERAL ####
	// Este es un Front Angular, lo vamos a compilar, ejecutar pruebas y en caso de ser exito, se desplegará en AWS usando S3, CloudFront como CDN
	// Finalmente guardamos el artefacto para auditoría o rollbacks, y notificamos a teams el resultado


	// Para que se ejecute este Pipeline, el desarrollador debe enviar un PR al Team Leader o supervisor, cuando este es solicitado se ejecuta 
	// y genera informes dentro del PR para que el supervisor apruebe o no el cambio al ambiente -dev, qa, prd-
    agent any


    // Para este CI de angular, vamos a requerir Node y terraform, previamente debe estar habilitada en "Global Tool Configuration", 
	// la versión que requiera el proyecto, y siempre usará esa versión.
    tools {
        terraform 'terraform1.3.6'
        nodejs 'Node16.16'
    }
    
    stages {

        // Compilamos el proyecto Angular y ubicamos los archivos estaticos en un carpeta especifica para su posterior uso
        stage('Build') {
            steps {
                sh 'npm install'
                sh 'ng build'
                sh 'cp -r dist/proyecto-servicio/* jenkins/CD/'
                sh 'zip -r app_${env.BRANCH_NAME}_${env.BUILD_NUMBER}.zip jenkins/CD/*'
            }
        }

        // Ejecución de pruebas unitarias, los reportes de cobertura de las pruebas también se genera en sonarQube
        stage('Test') {
            steps {
                sh 'ng test --watch=false --code-coverage'
                script {
                    def scannerHome = tool 'SonarQubeScanner'
                    withSonarQubeEnv('SonarCloud') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }

        // Aprovicionamos y configuramos la insfraestructura como codigo en AWS
        stage('Deploy AWS - s3 cloudfront web static') {
            steps {
                withEnv(["AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}", "AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}", "AWS_DEFAULT_REGION=${env.AWS_DEFAULT_REGION}"]) { 
                    sh 'terraform -chdir=jenkins/CD init'
                    sh 'terraform -chdir=jenkins/CD apply -auto-approve'
                }
            }
        }
    }

    post {
        // Registramos el artefacto en caso de exito para auditoría o Rollbacks de la verisión
        always {
            archiveArtifacts artifacts: 'app_${env.BRANCH_NAME}_${env.BUILD_NUMBER}.zip', onlyIfSuccessful: true
        }

        // Notificación a teams el resultado, exitoso o fallido
        success {
            office365ConnectorSend(
                webhookUrl: 'https://organizacionPajarito.webhook.office.com/webhookb2/cccc167/JenkinsCI/ccc',
                message: 'Application deployment successful',
                status: 'Success'
            )
        }
        failure {
            office365ConnectorSend(
                webhookUrl: 'https://organizacionPajarito.webhook.office.com/webhookb2/cccc167/JenkinsCI/ccc',
                message: 'Application deployment failed',
                status: 'Failure'
            )
        }
    }
}
